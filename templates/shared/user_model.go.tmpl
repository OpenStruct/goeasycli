package models

import (
	"errors"
	"context"
	"time"

	"gorm.io/gorm"
)

type GoEasyCLITestUser struct {
	ID uint `json:"id" gorm:"primaryKey;autoIncrement"`
	Name  string `json:"name,omitempty"`
	Email string `json:"email,omitempty" gorm:"unique"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func CreateUser(ctx context.Context,db *gorm.DB, user *GoEasyCLITestUser) error {
	return db.WithContext(ctx).Create(&user).Error
}

func GetAllUsers(ctx context.Context, db *gorm.DB) ([]GoEasyCLITestUser, error) {
	var users []GoEasyCLITestUser
	if err := db.WithContext(ctx).Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

func GetUserByID(ctx context.Context, db *gorm.DB, id string) (GoEasyCLITestUser, error) {
	var user GoEasyCLITestUser
	if err := db.WithContext(ctx).First(&user, id).Error; err != nil {
		return user, err
	}
	return user, nil
}

func UpdateUser(ctx context.Context, db *gorm.DB, user *GoEasyCLITestUser) error {
	result := db.WithContext(ctx).Where("id = ?", user.ID).Updates(user)
    if result.Error != nil {
        return result.Error
    }
    if result.RowsAffected == 0 {
        return errors.New("user not found")
    }
    return nil
}

func DeleteUser(ctx context.Context, db *gorm.DB, id string) error {
	return db.WithContext(ctx).Delete(&GoEasyCLITestUser{}, id).Error
}
