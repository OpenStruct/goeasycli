package database

import (
	"fmt"

	"gorm.io/driver/mysql"
	"gorm.io/driver/postgres"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"{{ .ProjectName }}/config"
)

var (
	Db *gorm.DB
)

type DatabaseConfig struct {
	Host     string
	Port     string
	User     string
	Password string
	DbName   string
	Driver   string
}

type Migrations struct {
	DB     *gorm.DB
	Models []interface{}
}

func Init() *gorm.DB {

	dbConfig := DatabaseConfig{
		Host:     config.CFG.V.GetString("DB_HOST"),
		Port:     config.CFG.V.GetString("DB_PORT"),
		User:     config.CFG.V.GetString("DB_USER"),
		Password: config.CFG.V.GetString("DB_PASSWORD"),
		DbName:   config.CFG.V.GetString("DB_NAME"),
		Driver:   config.CFG.V.GetString("DB_DRIVER"),
	}

	if dbConfig.Host == "" {
		dbConfig.Host = "localhost"
	}

	Db = NewDatabaseConnection(dbConfig)
	return Db

}

func NewDatabaseConnection(config DatabaseConfig) *gorm.DB {
	var dsn string
	switch config.Driver {
	case "postgres":
		dsn = fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=disable", config.Host, config.User, config.Password, config.DbName, config.Port)
		db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
		if err != nil {
			fmt.Println("failed to connect database")
			return nil
		}
		fmt.Println("database connected")
		return db

	case "sqlite":
		dsn = config.DbName
		db, err := gorm.Open(sqlite.Open(dsn), &gorm.Config{})
		if err != nil {
			fmt.Println("failed to connect database")
			return nil
		}
		fmt.Println("database connected")
		return db
	case "mysql":
		dsn = fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local", config.User, config.Password, config.Host, config.Port, config.DbName)
		db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})
		if err != nil {
			fmt.Println("failed to connect database")
			return nil
		}
		fmt.Println("database connected")
		return db

	default:
		fmt.Println("Unsupported database")
		return nil
	}

}

func RunMigrations(migrations Migrations) {
	if migrations.DB == nil {
		fmt.Println("Database connection is nil. cannot run migration")
		return
	}
	for _, model := range migrations.Models {
		err := migrations.DB.AutoMigrate(model)
		if err != nil {
			fmt.Println("error migrating models")
		}
	}
}
