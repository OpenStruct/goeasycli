package controllers

import (
	"{{ .ProjectName }}/database"
	"{{ .ProjectName }}/models"
	"{{ .ProjectName }}/utils"
	"github.com/gofiber/fiber/v2"
	"gorm.io/gorm"
)

type UserController struct{}

func (repo *UserController) CreateUser(c *fiber.Ctx) error {
	var user models.GoEasyCLITestUser
	if err := c.BodyParser(&user); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "cannot parse JSON"})
	}
	if err := models.CreateUser(c.Context(), database.Db, &user); err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}

	return utils.SuccessResponse(c, "User created successfully",user,nil)
}


func (repo *UserController) GetAllUsers(c *fiber.Ctx) error {
	users, err := models.GetAllUsers(c.Context(), database.Db)
	if err != nil {
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}
	return utils.SuccessResponse(c, "Users fetched successfully",users,nil)

}


func (repo *UserController) GetUserByID(c *fiber.Ctx) error {
	id := c.Params("id")
	user, err := models.GetUserByID(c.Context(), database.Db, id)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return c.Status(fiber.StatusNotFound).JSON(fiber.Map{"error": "User not found"})
		}
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}
	return utils.SuccessResponse(c, "User retrieved successfully",user,nil)
}


func (repo *UserController) UpdateUser(c *fiber.Ctx) error {
	var user models.GoEasyCLITestUser

	if err := c.BodyParser(&user); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "cannot parse JSON"})
	}

	if user.ID == 0 {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"message": "user id missing"})
	}

	if err := models.UpdateUser(c.Context(), database.Db, &user); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": err.Error()})
	}
	return utils.SuccessResponse(c, "User updated successfully",user,nil)
}

func (repo *UserController) DeleteUser(c *fiber.Ctx) error {
	id := c.Params("id")
	if err := models.DeleteUser(c.Context(), database.Db, id); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": err.Error()})
	}
	return c.Status(fiber.StatusOK).JSON(fiber.Map{"message": "User deleted successfully"})
}
