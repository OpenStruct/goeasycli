package controllers

import (
	"github.com/labstack/echo"
	"{{ .ProjectName }}/database"
	"{{ .ProjectName }}/models"
	"{{ .ProjectName }}/utils"
	"github.com/pkg/errors"
)

type UserRepo struct{}

// CreateUser creates a new user
func (repo *UserRepo) CreateUser(ctx echo.Context) error {
	var user models.GoEasyCLITestUser

	if err := ctx.Bind(&user); err != nil {
		utils.FailedResponse(ctx, "Failed to bind user data", err)
		return err
	}

	if err := models.CreateUser(ctx, database.Db, &user); err != nil {
		utils.ErrorResponse(ctx, "Failed to create user", err)
		return err
	}

	utils.SuccessResponse(ctx, "User created successfully", user, nil)
	return nil
}

// GetAllUsers fetches all users
func (repo *UserRepo) GetAllUsers(ctx echo.Context) error {
	users, err := models.GetAllUsers(ctx, database.Db)
	if err != nil {
		utils.ErrorResponse(ctx, "Failed to get users", err)
		return err
	}

	utils.SuccessResponse(ctx, "Users fetched successfully", users, nil)
	return nil
}

// GetUserByID fetches a user by ID
func (repo *UserRepo) GetUserByID(ctx echo.Context) error {
	user, err := models.GetUserByID(ctx, database.Db, ctx.Param("id"))
	if err != nil {
		utils.ErrorResponse(ctx, "User not found", err)
		return err
	}

	utils.SuccessResponse(ctx, "User retrieved successfully", user, nil)
	return nil
}

// UpdateUser updates a user
func (repo *UserRepo) UpdateUser(ctx echo.Context) error {
	var user models.GoEasyCLITestUser

	if err := ctx.Bind(&user); err != nil {
		utils.FailedResponse(ctx, "Invalid request", err)
		return err
	}

	if user.ID == 0 {
		utils.FailedResponse(ctx, "Invalid user ID", nil)
		return errors.Errorf("Invalid user ID")
	}

	if err := models.UpdateUser(ctx, database.Db, &user); err != nil {
		utils.ErrorResponse(ctx, "Failed to update user", err)
		return err
	}

	utils.SuccessResponse(ctx, "User updated successfully", user, nil)
	return nil
}

// DeleteUser deletes a user
func (repo *UserRepo) DeleteUser(ctx echo.Context) error {
	err := models.DeleteUser(ctx, database.Db, ctx.Param("id"))
	if err != nil {
		utils.ErrorResponse(ctx, "Failed to delete user", err)
		return err
	}

	utils.SuccessResponse(ctx, "User deleted successfully", nil, nil)
	return nil
}
