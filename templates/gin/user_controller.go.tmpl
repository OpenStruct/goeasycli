package controllers

import (
	"errors"
	"strings"
	"net/http"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"{{ .ProjectName }}/database"
	"{{ .ProjectName }}/models"
	"{{ .ProjectName }}/utils"
)

type UserRepo struct{}

func (repo *UserRepo) CreateUser(ctx *gin.Context) {
	var user models.GoEasyCLITestUser
	if err := ctx.ShouldBindJSON(&user); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if err := models.CreateUser(ctx, database.Db, &user); err != nil {
		if errors.Is(err, gorm.ErrDuplicatedKey) || strings.Contains(err.Error(), "UNIQUE constraint failed") {
			ctx.JSON(http.StatusConflict, gin.H{"error": "Email already exists"})
		} else {
			ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}

	utils.SuccessResponse(ctx, "User created successfully", user, nil)
}


func (repo *UserRepo) GetAllUsers(ctx *gin.Context) {
	users, err := models.GetAllUsers(ctx, database.Db)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	
	utils.SuccessResponse(ctx, "Users fetched successfully", users, nil)
}


func (repo *UserRepo) GetUserByID(ctx *gin.Context) {
	id := ctx.Param("id")
	user, err := models.GetUserByID(ctx, database.Db, id)
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			ctx.JSON(http.StatusNotFound, gin.H{"error": "User not found"})
		} else {
			ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		}
		return
	}
	utils.SuccessResponse(ctx, "User retrieved successfully", user, nil)
}


func (repo *UserRepo) UpdateUser(ctx *gin.Context) {
	var user models.GoEasyCLITestUser

	if err := ctx.ShouldBindJSON(&user); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if user.ID == 0 {
		ctx.JSON(http.StatusBadRequest, gin.H{"message": "user id missing"})
		return
	}

	if err := models.UpdateUser(ctx, database.Db, &user); err != nil {
		if err.Error() == "user not found" {
			ctx.JSON(http.StatusNotFound, map[string]string{"error": "User not found"})
			return
		}
		utils.ErrorResponse(ctx, "Failed to update user", err)
		return
	}
	utils.SuccessResponse(ctx, "User updated successfully", user, nil)
}


func (repo *UserRepo) DeleteUser(ctx *gin.Context) {
	id := ctx.Param("id")
	if err := models.DeleteUser(ctx, database.Db, id); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, gin.H{"message": "User deleted successfully"})
}
