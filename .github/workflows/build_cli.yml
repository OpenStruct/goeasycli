name: goreleaser

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.title, 'Release:')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TAG=$(git tag --sort=-v:refname | head -n 1)
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Calculate next tag
        id: calc_next_tag
        run: |
          LATEST_TAG=${{ env.LATEST_TAG }}
          if [[ -z "$LATEST_TAG" ]]; then
            NEXT_TAG="v0.1.0"
          elif [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            NEXT_PATCH=$((PATCH + 1))
            NEXT_TAG="v$MAJOR.$MINOR.$NEXT_PATCH"
          else
            echo "LATEST_TAG does not match pattern: $LATEST_TAG"
            exit 1
          fi
          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV

      - name: Create Tag
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag ${{ env.NEXT_TAG }}

      - name: Push Tag
        env:
          NEXT_TAG: ${{ env.NEXT_TAG }}
        run: |
          git push origin $NEXT_TAG || (echo "Tag $NEXT_TAG already exists, retrying with next patch version" && exit 1)

      - name: Retry with next patch version if tag already exists
        if: failure()
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            NEXT_PATCH=$((PATCH + 1))
            NEXT_TAG="v$MAJOR.$MINOR.$NEXT_PATCH"
            echo "Retrying with tag $NEXT_TAG"
            git tag $NEXT_TAG
            git push origin $NEXT_TAG
          else
            echo "LATEST_TAG does not match pattern: $LATEST_TAG"
            exit 1
          fi

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_VERSION: ${{ env.NEXT_TAG }}